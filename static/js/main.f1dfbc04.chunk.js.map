{"version":3,"sources":["components/entry/entry.component.jsx","components/entry-list/entry-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Entry","props","className","alt","src","pokemon","id","name","english","type","map","key","join","EntryList","slice","SearchBox","placeholder","handleChange","onChange","App","e","setState","searchText","target","value","state","bind","fetch","then","response","json","pokes","this","filteredPokemons","filter","poke","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qUAIaA,G,YAAQ,SAACC,GAAD,OACjB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,mFAA8EH,EAAMI,QAAQC,GAA5F,UAClB,4BAAKL,EAAMI,QAAQE,KAAKC,SAGpBP,EAAMI,QAAQI,KAAKC,KAAI,SAAAD,GAAI,OACvB,uBAAGE,IAAK,CAACV,EAAMI,QAAQC,GAAIG,GAAMG,QAAUH,SCP9CI,G,MAAY,SAAAZ,GAAK,OAC1B,yBAAKC,UAAU,aAEXD,EAAMI,QAAQS,MAAM,EAAG,IAAIJ,KAAI,SAAAL,GAAO,OAClC,kBAAC,EAAD,CAAOM,IAAKN,EAAQC,GAAID,QAASA,UCLhCU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACAf,UAAU,SACVO,KAAK,SACLO,YAAaA,EACbE,SAAUD,MCkCCE,E,YArCf,aAAc,IAAD,8BACX,+CAiBFF,aAAe,SAACG,GACd,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAhBpC,EAAKC,MAAQ,CACXpB,QAAS,GACTiB,WAAY,IAGhB,EAAKL,aAAe,EAAKA,aAAaS,KAAlB,gBARP,E,iFAYO,IAAD,OACjBC,MAAM,8EACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAChB,QAAQ0B,S,+BAO7B,IAAD,EAC0BC,KAAKP,MAA7BpB,EADF,EACEA,QAASiB,EADX,EACWA,WACXW,EAAmB5B,EAAQ6B,QAAO,SAAAC,GAAI,OAAIA,EAAK5B,KAAKC,QAAQ4B,cAAcC,SAASf,EAAWc,kBACpG,OACA,yBAAKlC,UAAU,OACb,uCACA,kBAAC,EAAD,CAAWc,YAAY,iBACvBC,aAAce,KAAKf,eACnB,kBAAC,EAAD,CAAWZ,QAAU4B,S,GA/BTK,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.f1dfbc04.chunk.js","sourcesContent":["import React from 'react';\nimport './entry.styles.css';\n\n\nexport const Entry = (props) => (\n    <div className=\"card-container\">\n    <img alt=\"pokemon\" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.pokemon.id}.png`}/>\n        <h2>{props.pokemon.name.english}</h2>\n     \n        {\n            props.pokemon.type.map(type => (\n                <p key={[props.pokemon.id, type].join()} >{type}</p>\n            ))\n        }\n  \n    </div>\n);","import React from 'react';\nimport {Entry} from '../entry/entry.component.jsx';\nimport './entry-list.styles.css';\n\nexport const EntryList = props => (\n    <div className=\"card-list\">\n    {\n        props.pokemon.slice(0, 19).map(pokemon => (\n            <Entry key={pokemon.id} pokemon={pokemon} />\n        ))\n    }\n    </div>\n);\n\n\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n    className=\"search\"\n    type=\"search\" \n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);","import React, { Component } from 'react';\nimport './App.css';\nimport {EntryList} from './components/entry-list/entry-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\nclass App extends Component{\nconstructor(){\n  super();\n\n  this.state = {\n    pokemon: [],\n    searchText: \"\"\n  };\n\nthis.handleChange = this.handleChange.bind(this);\n}\n\n\ncomponentDidMount(){\n  fetch('https://raw.githubusercontent.com/fanzeyi/pokemon.json/master/pokedex.json')\n  .then(response => response.json())\n  .then(pokes => this.setState({pokemon:pokes}))\n\n}\nhandleChange = (e) => {\n  this.setState({searchText: e.target.value})\n}\n\n  render(){\n    const { pokemon, searchText } = this.state;\n    const filteredPokemons = pokemon.filter(poke => poke.name.english.toLowerCase().includes(searchText.toLowerCase()))\n    return(\n    <div className=\"App\">\n      <h1>Pokedex</h1>\n      <SearchBox placeholder=\"Search Pokemon\" \n      handleChange={this.handleChange}/>\n      <EntryList pokemon ={filteredPokemons}/>\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}